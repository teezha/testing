/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.52
 * Generated at: 2017-03-08 04:33:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.annotation.WebServlet;
import java.io.*;
import java.util.StringTokenizer;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class mod4_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
 

    
    
    //to get the content type information from the form
    String contentType = request.getContentType();
    String fileName =request.getParameter("F2");

    if (contentType != null) {
        
        out.println("starting file upload <br>");
        String filepath = "H:\\var\\gist\\8100\\Mod4\\mod4app\\web\\arclines.txt";


// DECLARE THE VARIABLES TO USE IN THE FILE PROCESSING
// THESE ARE SUGGESTED VARS - YOU CAN CHANGE OR ADD YOUR OWN
        int lineid = 0;
        int endCount = 0;
        double length = 0, x1 = 0.0, y1 = 0.0, x2 = 0.0, y2 = 0.0;
        StringTokenizer st;
        
       try{
        File bufferFile = new File(String.valueOf(filepath));
        
        
        String regex = "\\b[0-9].*\\s\\b[0-9].*";
        String strregex = "[a-zA-Z]{3}";
        Pattern pattern = Pattern.compile(regex);
        Pattern strPattern = Pattern.compile(strregex);
        BufferedReader reader = new BufferedReader(new FileReader(bufferFile));
        String line;



            while ((line = reader.readLine()) != null){
                

                
                Matcher matcher = pattern.matcher(line.trim());
                Matcher strMatcher = strPattern.matcher(line.trim());
                if (strMatcher.find()) {
                    endCount++;
                    if (endCount > 1) {
                        out.print("<br>END OF FILE");
                        break;
                    }
                    out.print("<br>Line ID:" + lineid + " is " + length + "m long.\n");
                    length = 0;
                    lineid = 0;
                    x1=0;
                    y1=0;
                } else if (matcher.find()) {
                    st = new StringTokenizer(line.trim(), " ");
                    x2 = Double.valueOf(st.nextToken());
                    y2 = Double.valueOf(st.nextToken());
                    if (x1!=0|y1!=0){
                        length += Math.sqrt(Math.pow((x2 - x1), 2.0) + Math.pow((y2 - y1), 2.0));
                    }
                    x1 = x2;
                    y1 = y2;


                } else {
                    lineid = Integer.parseInt(line.trim());
                    endCount=0;
                }
            }
      
        out.println("<BR> File processing completed");

    } catch (IOException e) {
            e.printStackTrace();
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }
    }




    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
